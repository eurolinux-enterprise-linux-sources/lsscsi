From 9430ccdaabb161f6d69b89157efb8fa72f3938f8 Mon Sep 17 00:00:00 2001
From: David Sommerseth <davids@redhat.com>
Date: Mon, 23 Feb 2015 19:51:39 +0100
Subject: [PATCH] Fix wrong path when checking protection_type and integrity

---
 lsscsi.c | 229 ++++++++++++++++++++++++++++++++++++---------------------------
 1 file changed, 131 insertions(+), 98 deletions(-)

diff --git a/lsscsi.c b/lsscsi.c
index 9fa9489..aaeb8b0 100644
--- a/lsscsi.c
+++ b/lsscsi.c
@@ -33,6 +33,19 @@ static const char * version_str = "0.23  2009/12/03";
 #define FT_BLOCK 1
 #define FT_CHAR 2
 
+#ifdef PATH_MAX
+#define LMAX_PATH PATH_MAX
+#else
+#define LMAX_PATH 2048
+#endif
+
+#ifdef NAME_MAX
+#define LMAX_NAME (NAME_MAX + 1)
+#else
+#define LMAX_NAME 256
+#endif
+#define LMAX_DEVPATH (LMAX_NAME + 128)
+
 #define TRANSPORT_UNKNOWN 0
 #define TRANSPORT_SPI 1
 #define TRANSPORT_FC 2
@@ -170,8 +183,6 @@ struct item_t {
 static struct item_t non_sg;
 static struct item_t aa_sg;
 static struct item_t aa_first;
-static struct item_t aa_sd;
-static struct item_t aa_block;
 
 static char sas_low_phy[NAME_LEN_MAX];
 static char sas_hold_end_device[NAME_LEN_MAX];
@@ -210,6 +221,24 @@ usage()
         fprintf(stderr, "%s", usage_message);
 }
 
+/* Copies (dest_maxlen - 1) or less chars from src to dest. Less chars are
+ * copied if '\0' char found in src. As long as dest_maxlen > 0 then dest
+ * will be '\0' terminated on exit. If dest_maxlen < 1 then does nothing. */
+static void
+my_strcopy(char *dest, const char *src, int dest_maxlen)
+{
+        const char * lp;
+
+        if (dest_maxlen < 1)
+                return;
+        lp = (const char *)memchr(src, 0, dest_maxlen);
+        if (NULL == lp) {
+                memcpy(dest, src, dest_maxlen - 1);
+                dest[dest_maxlen - 1] = '\0';
+        } else
+                memcpy(dest, src, (lp - src) + 1);
+}
+
 /* Compare <host:controller:target:lun> tuples (aka <h:c:t:l> or hctl) */
 static int
 cmp_hctl(const struct addr_hctl * le, const struct addr_hctl * ri)
@@ -261,74 +290,101 @@ first_scandir_select(const struct dirent * s)
 static int
 block_scandir_select(const struct dirent * s)
 {
-        if ((DT_LNK != s->d_type) &&
-            ((DT_DIR != s->d_type) || ('.' == s->d_name[0])))
+        if (s->d_type != DT_LNK && s->d_type != DT_DIR)
                 return 0;
-        if (strstr(s->d_name, "block")){
-                strncpy(aa_block.name, s->d_name, NAME_LEN_MAX);
-                aa_block.ft = FT_CHAR;  /* dummy */
-                aa_block.d_type =  s->d_type;
-        }
-        return 1;
+
+        if (s->d_name[0] == '.')
+                return 0;
+
+        if (strstr(s->d_name, "block"))
+                return 1;
+
+        return 0;
 }
 
-/* scan for scsi_disk directory in  /sys/bus/scsi/devices/<h:c:i:l> */
 static int
-block_scan(const char * dir_name, const struct lsscsi_opt_coll * opts)
+sd_scandir_select(const struct dirent * s)
 {
-        char name[NAME_LEN_MAX];
-        struct dirent ** namelist;
-        int num, k;
+        if (s->d_type != DT_LNK && s->d_type != DT_DIR)
+                return 0;
 
-        num = scandir(dir_name, &namelist, block_scandir_select, NULL);
-        if (num < 0) {
-                if (opts->verbose > 0) {
-                        snprintf(name, NAME_LEN_MAX, "scandir: %s", dir_name);
-                        perror(name);
-                }
-                return -1;
-        }
-        for (k = 0; k < num; ++k)
-                free(namelist[k]);
-        free(namelist);
-        return num;
+        if (s->d_name[0] == '.')
+                return 0;
+
+        if (strstr(s->d_name, "scsi_disk"))
+                return 1;
+
+        return 0;
 }
 
 static int
-sd_scandir_select(const struct dirent * s)
+sub_scandir_select(const struct dirent * s)
 {
-        if ((DT_LNK != s->d_type) &&
-            ((DT_DIR != s->d_type) || ('.' == s->d_name[0])))
+        if (s->d_type == DT_LNK)
+                return 1;
+
+        if (s->d_type == DT_DIR && s->d_name[0] != '.')
+                return 1;
+
+        return 0;
+}
+
+typedef int (* dirent_select_fn) (const struct dirent *);
+
+static int
+sub_scan(char * dir_name, const char * sub_str, dirent_select_fn fn)
+{
+        struct dirent ** namelist;
+        int num, i, len;
+
+        num = scandir(dir_name, &namelist, fn, NULL);
+        if (num <= 0)
+                return 0;
+        len = strlen(dir_name);
+        if (len >= LMAX_PATH)
                 return 0;
-        if (strstr(s->d_name, "scsi_disk")){
-                strncpy(aa_sd.name, s->d_name, NAME_LEN_MAX);
-                aa_sd.ft = FT_CHAR;  /* dummy */
-                aa_sd.d_type =  s->d_type;
+        snprintf(dir_name + len, LMAX_PATH - len, "/%s", namelist[0]->d_name);
+
+        for (i = 0; i < num; i++)
+                free(namelist[i]);
+        free(namelist);
+
+        if (num && strstr(dir_name, sub_str) == 0) {
+                num = scandir(dir_name, &namelist, sub_scandir_select, NULL);
+                if (num <= 0)
+                        return 0;
+                len = strlen(dir_name);
+                if (len >= LMAX_PATH)
+                        return 0;
+                snprintf(dir_name + len, LMAX_PATH - len, "/%s",
+                         namelist[0]->d_name);
+
+                for (i = 0; i < num; i++)
+                        free(namelist[i]);
+                free(namelist);
         }
         return 1;
 }
 
+/* Scan for block:sdN or block/sdN directory in
+ * /sys/bus/scsi/devices/h:c:i:l
+ */
 static int
-sd_scan(const char * dir_name, const struct lsscsi_opt_coll * opts)
+block_scan(char * dir_name)
 {
-        char name[NAME_LEN_MAX];
-        struct dirent ** namelist;
-        int num, k;
+        return sub_scan(dir_name, "block:", block_scandir_select);
+}
 
-        num = scandir(dir_name, &namelist, sd_scandir_select, NULL);
-        if (num < 0) {
-                if (opts->verbose > 0) {
-                        snprintf(name, NAME_LEN_MAX, "scandir: %s", dir_name);
-                        perror(name);
-                }
-                return -1;
-        }
-        for (k = 0; k < num; ++k)
-                free(namelist[k]);
-        free(namelist);
-        return num;
+/* Scan for scsi_disk:h:c:i:l or scsi_disk/h:c:i:l directory in
+ * /sys/bus/scsi/devices/h:c:i:l
+ */
+static int
+sd_scan(char * dir_name)
+{
+        return sub_scan(dir_name, "scsi_disk:", sd_scandir_select);
 }
 
+
 /* scan for directory entry that is either a symlink or a directory */
 static int
 scan_for_first(const char * dir_name, const struct lsscsi_opt_coll * opts)
@@ -1872,57 +1928,34 @@ one_sdev_entry(const char * dir_name, const char * devname,
         }
 
         if (opts->protection) {
-                int kernel_dif_support = 0;
-                if (sd_scan(buff,opts)) {
-                        if (if_directory_chdir(buff,aa_sd.name)) {
-                                char value[NAME_LEN_MAX];
-                                char sddir[NAME_LEN_MAX];
-                                strncpy(sddir,buff,NAME_LEN_MAX);
-                                strcat(sddir,"/");
-                                strcat(sddir,aa_sd.name);
-                                if (!get_value(sddir, "protection_type", value, 
-                                        NAME_LEN_MAX)) {
-                                        /* kernel < 2.6.27 */
-                                        if (opts->verbose)
-                                                printf(" No Data Integrity "
-                                                                "Support\n");
-                                } else {
-                                        kernel_dif_support = 1;
-                                        if (strncmp(value, "0", 1))
-                                                printf("  DIF/Type%1s ",value);
-                                        else
-                                                printf("  -         ");
-                                }
-                        } else {
-                                printf("  -         ");
-                        }
-                }
+                /* This complete if-block is backported from lsscsi-0.28 */
+                char sddir[LMAX_DEVPATH];
+                char blkdir[LMAX_DEVPATH];
 
-                if (kernel_dif_support && block_scan(buff,opts)) {
-                        if (if_directory_chdir(buff,aa_block.name)) {
-                                char value[NAME_LEN_MAX];
-                                char blkdir[NAME_LEN_MAX];
-                                strncpy(blkdir,buff,NAME_LEN_MAX);
-                                strcat(blkdir,"/");
-                                strcat(blkdir,aa_block.name);
-                                if (if_directory_chdir(blkdir,"integrity")) {
-                                        if (!get_value(".", "format", value, 
-                                                                NAME_LEN_MAX)) {
-                                                if (opts->verbose)
-                                                        printf(" No Data "
-                                                                "Integrity "
-                                                                "Support\n");
-                                        } else {
-                                                printf(" %-17s",value);
-                                        }
-                                } else {
-                                        printf(" %-17s","-   ");
-                                }
-                        }
-                }
-        }
+                my_strcopy(sddir,  buff, sizeof(sddir));
+                my_strcopy(blkdir, buff, sizeof(blkdir));
+
+                if (sd_scan(sddir) &&
+                    if_directory_chdir(sddir, ".") &&
+                    get_value(".", "protection_type", value, sizeof(value))) {
+
+                        if (!strncmp(value, "0", 1))
+                                printf("  %-9s", "-");
+                        else
+                                printf("  DIF/Type%1s", value);
+
+                } else
+                        printf("  %-9s", "-");
 
+                if (block_scan(blkdir) &&
+                    if_directory_chdir(blkdir, "integrity") &&
+                    get_value(".", "format", value, sizeof(value)))
+                        printf("  %-16s", value);
+                else
+                        printf("  %-16s", "-");
+        }
         printf("\n");
+
         if (opts->long_opt > 0)
                 longer_d_entry(buff, devname, opts);
         if (opts->verbose > 0) {
-- 
2.2.0

